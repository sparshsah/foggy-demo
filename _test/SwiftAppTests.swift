import XCTest
@testable import MyApp

// Pretend this code defining `MyError` and `myFuncThatThrows` actually lives in `MyApp`.
enum MyError: Error {
    case myExpectedError
    case myUnexpectedError
}

func myFuncThatThrows(myErrToThrow: Int = -1) throws {
    if myErrToThrow < 0 {
        return
    } else if myErrToThrow == 0 {
        throw MyError.myExpectedError
    } else {
        throw MyError.myUnexpectedError
    }
}

/*
 An Xcode unit-test bundle (AKA target) can contain multiple
 unit-test modules like `SwiftAppTests.swift`, which can contain multiple
 unit-test case classes like `SkeletonTests`, which can contain multiple
 unit-test funcs like `testSkeleton()`.
 */

// Auto-generated by Xcode.
class SkeletonTests: XCTestCase {

    override func setUpWithError() throws {
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    func testSkeleton() throws {
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
    }

    func testPerformanceSkeleton() throws {
        // This is an example of a performance test case.
        self.measure {
            // Put the code you want to measure the time of here.
        }
    }

}

class FloatEqualityTests: XCTestCase {

    let x: Float = 1.0
    let y: Float = x
    let z: Float = x + 0.01

    func testBinaryReprEqual() throws {
        XCTAssertEqual(x, y)
    }

    func testNumericalEqualTight() throws {
        XCTAssertEqual(x, y, accuracy: 1e-4)
    }

    func testNumericalEqualLoose() throws {
        XCTAssertEqual(x, z, accuracy: 0.1)
    }

    func testBinaryReprNotEqual() throws {
        XCTAssertNotEqual(x, z)
    }

    func testNumericalNotEqual() throws {
        XCTAssertNotEqual(x, z, accuracy: 1e-4)
    }

}

class ThrowingTests: XCTestCase {

    func testNoThrow() throws {
        XCTAssertNoThrow(try myFuncThatThrows())
    }

    func testThrows() throws {
        XCTAssertThrowsError(try myFuncThatThrows(myErrToThrow: 0))
    }

    func testThrowsSomethingSpecific() throws {
        XCTAssertThrowsError(try myFuncThatThrows(myErrToThrow: 0)) { error in
            XCTAssertEqual(error as! MyError, MyError.myExpectedError)
        }
    }

    func testThrowsSomethingOtherThanSpecific() throws {
        XCTAssertThrowsError(try myFuncThatThrows(myErrToThrow: 1)) { error in
            XCTAssertNotEqual(error as! MyError, MyError.myExpectedError)
        }
    }
}
